Primarily a scripting language
Commands used in a text editor NOT directly in terminal

Create a text document with .sh extension

First line of script defines interpreter
#!/bin/bash
list of available shells are contained in /etc/shells

Allow document to be executable to file:
chmod a+x /path/to/file.sh
(chmod a+x grants execute privileges to all users)

Access variables with $ in front of variable name
Create a new read-only variable:
declare newVar = 'This is a new variable'

Arrays:
Create array with newArr=('thing1' 'thing2')
(BASH is fairly picky about spaces before/after equals sign)

Delete elements:
unset newArr[2]

Print elements:
Single element:  echo "${newArr[1]}"
All elements (@ represents all):  echo "${newArr[@]}"
Print indices:  echo "${!newArr[@]}"
Print length of array (#):  echo ""${#newArr[@]}

Use "read" function to query user.
Syntax:  read variable_name

Include a prompt:
read -p "Text to input a variable: " variable_name


IF/THEN syntax:
if [ logical statement ]
then 
    some action
elif [other logical]
    then some other action
else 
    a final action
fi

Logical operators:  -eq, -neq, -gt, -lt  when surrounded by []
Can use traditional operators when expression is surrounded by ()
Use && for logical AND  ( if [ condition1 ]  && [ condition2 ]
OR is implemented using ||



Loops:

for:
for i in {start..ending..increment}
do
    some operations
done


Alternatively:
for (( i=0; i<5; i++ ))


while:
while [ condition ]
do
   some operations
done


'until' loops are written in the same manner

'break', 'continue' functions breaks out of current loop



Storing application STDOUT to a variable
some_variable=$(some_application)
ex. fooVar=$(who)


Defining a function:
someFunction() {
    actions
}

Call function
someFunction;

Debugging:  Call with bash and include -x flag
bash -x ./path/to/scipt.sh

-OR-

include -x flag after shell declaration in script
ex. #! /bin/bash -x

Can debug only a portion of code with:
set -x
CODE TO DEBUG
set +x


Inputing arguments into a bash script via "standard in" (STDIN):
In the terminal:
/path/to/script.sh input1 input2

Within the script, these inputs may be accessed by referencing $1, $2.
$0 is the script name

Allow for arbitrary number of inputs:
Within script:
args=("$@")

Number of arguments input is:
$#




Data streams:
ls -al 1>file1.txt 2>file2.txt

'0' refers to standard input
'1' refers to standard output
'2' refers to standard error
Above snippet, saves std output/error to file1/2

Send both to same file:
ls -al >file1.txt 2>$1
OR: ls -al >& file1.txt


Transmitting information between scripts:
Use export command (ex.  message = 'hi'; export message)
Call second script and access with $message


Arithmetic:
Define variables
echo $(( $var1 + $var2 ))
spaces surrounding expression are necessary
alternatively:  echo $(expr $var1 + $var2)


Other scripting languages related to Bash:
tr
awk
sed


Comments:
single line - prepend with #
multiline - : '  some text - over many lines'



Check if a directory with desired name exists:
if [ -d "$DIRNAME" ]
then
  SOME ACTIONS

Analagous syntax for checking existence of files using -f flag

